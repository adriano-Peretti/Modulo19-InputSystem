//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/CharacterAndNave/InputSystem/MyControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyControls"",
    ""maps"": [
        {
            ""name"": ""Nave"",
            ""id"": ""615055a1-3fed-481b-a1ab-a3c37fa1b19d"",
            ""actions"": [
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Value"",
                    ""id"": ""9d244e53-0b59-4231-8f73-ff9f8b44b52b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HorizontalMove"",
                    ""type"": ""Value"",
                    ""id"": ""c6fc6d1e-5383-427f-89fa-b9f2c738f99c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""64657637-b0fc-40d3-a657-c121c8044aae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Leave"",
                    ""type"": ""Button"",
                    ""id"": ""9cacfa1d-e0c8-4b22-b939-88e876e8022a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42745b38-9994-4cc9-bec2-e1ca51f23346"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f80659c-7e8e-4a32-97d8-278e8745f902"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Leave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""aa8b1202-dc53-4339-b075-5d156af3dea6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5e513a70-073c-435d-81fe-8d34c57d2d7a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""146fab20-642b-4377-91d4-78b59ca94f2e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""b9eb4e3b-7d3e-47b3-83de-fd8635cbad9f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7b9a7f41-94fc-4847-8eaa-66c82947e6bc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""87d9be31-b907-43df-9d04-88338192f609"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5838ec2b-5d4a-4b42-9ac0-1d450c39d361"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ef12c784-0a5a-440e-8e6c-fbed4847315b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9376ba3f-6477-48f0-9c27-8ab385dc95b1"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""UpDown"",
                    ""id"": ""5a35dafb-b059-4a53-a982-b4042f3a73b3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4118465e-f614-4085-adb4-d209471d0c18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1bc285dd-0b2d-4a5e-948d-816cd0fe3a4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0ddb12a4-0356-4035-babe-0db0c8fc7685"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e78a37f0-0f09-4545-8509-43c470edba42"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""704d7f01-cc13-4522-8d1e-ebb345f8240b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""73a9af6f-e097-4165-bd82-771500a51927"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b3ca8445-3b5f-42a1-8d24-968ee78b7866"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""35270f15-9289-49f0-abf3-568f33b376aa"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""75679a5c-ad4d-49fb-9829-72ca4230de4e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e80a0b35-58e5-409a-a44e-a1fb9d816a2e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Personagem"",
            ""id"": ""4ef020f0-c010-4aa3-a902-b51a61531515"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6a1ac3c9-4c30-4657-8dd2-34f9f65e2bbb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""a5df6213-7dc3-4238-a54f-c1bdde30b488"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""9b997d6b-7e51-430f-8410-9ea2fda102c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""77471d1f-776a-497c-8be9-4526a62a488c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""daff149c-a712-44e2-bc99-1c89340ea8a3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2a4017bc-b1db-4691-aafd-58046e07adb0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""459ea076-3bd5-4b63-8db1-428ef7e02525"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bbd14a5a-b012-45cc-9da0-a7d44f6f18c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9839beb-6976-47e6-959e-191de873b8cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""1ab68c05-d1b6-41ed-863d-d2a5a4114b24"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a77a9459-b87d-4a5e-a443-9fa261f6c120"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0b7e59e4-3431-4272-9d26-e8335758def3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""386cdbf2-54f0-4317-8809-46aca43010f9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""49a44223-abf7-43c1-9889-5807cb906c82"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4f661b48-7633-4d60-b734-c2c3098126ed"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""877b4227-2d0d-43a2-b05c-389e3308f1a9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb3d4ee4-a915-4d39-abad-2c4d41541aae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b20ef627-bb14-4c12-aaf0-7d1c826a61aa"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77c50a81-f0a1-4002-bc48-5f477f37164f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6206597-e660-49c9-98b1-9322c02ce0ab"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c8870b-536b-489b-8f10-4e8d0a575897"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e28b8283-686b-4d63-8e5e-7e95e16fcf30"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OrbitView"",
            ""id"": ""b25d0713-60ab-4b1a-b3b9-67218c6d1b0b"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""1215352b-c2ba-4ba2-8813-ee57d7ac994c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""f948e8c4-27f2-4b81-914d-8aa94ecc3239"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartRotate"",
                    ""type"": ""Value"",
                    ""id"": ""e5b3db8a-b95d-427f-8a8e-c61c37fa6281"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""6faac8bc-916f-4a39-ac4e-3bf25b1b5019"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""67351ba3-b030-4d47-8419-4ee7547f3b22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c00db59b-ae67-4540-9e6f-6768e53f7289"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""StartRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fad5d98-6234-4686-8610-a905472e0e31"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a2770cc-a307-4a2d-a5ab-0a145d48bd59"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f1cace0-c444-4309-b03f-fc5b79bbde94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d24eb1cf-9ab7-473c-a37e-0d1a29a192f1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Nave
        m_Nave = asset.FindActionMap("Nave", throwIfNotFound: true);
        m_Nave_VerticalMove = m_Nave.FindAction("VerticalMove", throwIfNotFound: true);
        m_Nave_HorizontalMove = m_Nave.FindAction("HorizontalMove", throwIfNotFound: true);
        m_Nave_Accelerate = m_Nave.FindAction("Accelerate", throwIfNotFound: true);
        m_Nave_Leave = m_Nave.FindAction("Leave", throwIfNotFound: true);
        // Personagem
        m_Personagem = asset.FindActionMap("Personagem", throwIfNotFound: true);
        m_Personagem_Move = m_Personagem.FindAction("Move", throwIfNotFound: true);
        m_Personagem_Jump = m_Personagem.FindAction("Jump", throwIfNotFound: true);
        m_Personagem_Enter = m_Personagem.FindAction("Enter", throwIfNotFound: true);
        m_Personagem_Look = m_Personagem.FindAction("Look", throwIfNotFound: true);
        // OrbitView
        m_OrbitView = asset.FindActionMap("OrbitView", throwIfNotFound: true);
        m_OrbitView_Zoom = m_OrbitView.FindAction("Zoom", throwIfNotFound: true);
        m_OrbitView_Rotate = m_OrbitView.FindAction("Rotate", throwIfNotFound: true);
        m_OrbitView_StartRotate = m_OrbitView.FindAction("StartRotate", throwIfNotFound: true);
        m_OrbitView_Next = m_OrbitView.FindAction("Next", throwIfNotFound: true);
        m_OrbitView_Previous = m_OrbitView.FindAction("Previous", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Nave
    private readonly InputActionMap m_Nave;
    private INaveActions m_NaveActionsCallbackInterface;
    private readonly InputAction m_Nave_VerticalMove;
    private readonly InputAction m_Nave_HorizontalMove;
    private readonly InputAction m_Nave_Accelerate;
    private readonly InputAction m_Nave_Leave;
    public struct NaveActions
    {
        private @MyControls m_Wrapper;
        public NaveActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalMove => m_Wrapper.m_Nave_VerticalMove;
        public InputAction @HorizontalMove => m_Wrapper.m_Nave_HorizontalMove;
        public InputAction @Accelerate => m_Wrapper.m_Nave_Accelerate;
        public InputAction @Leave => m_Wrapper.m_Nave_Leave;
        public InputActionMap Get() { return m_Wrapper.m_Nave; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NaveActions set) { return set.Get(); }
        public void SetCallbacks(INaveActions instance)
        {
            if (m_Wrapper.m_NaveActionsCallbackInterface != null)
            {
                @VerticalMove.started -= m_Wrapper.m_NaveActionsCallbackInterface.OnVerticalMove;
                @VerticalMove.performed -= m_Wrapper.m_NaveActionsCallbackInterface.OnVerticalMove;
                @VerticalMove.canceled -= m_Wrapper.m_NaveActionsCallbackInterface.OnVerticalMove;
                @HorizontalMove.started -= m_Wrapper.m_NaveActionsCallbackInterface.OnHorizontalMove;
                @HorizontalMove.performed -= m_Wrapper.m_NaveActionsCallbackInterface.OnHorizontalMove;
                @HorizontalMove.canceled -= m_Wrapper.m_NaveActionsCallbackInterface.OnHorizontalMove;
                @Accelerate.started -= m_Wrapper.m_NaveActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_NaveActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_NaveActionsCallbackInterface.OnAccelerate;
                @Leave.started -= m_Wrapper.m_NaveActionsCallbackInterface.OnLeave;
                @Leave.performed -= m_Wrapper.m_NaveActionsCallbackInterface.OnLeave;
                @Leave.canceled -= m_Wrapper.m_NaveActionsCallbackInterface.OnLeave;
            }
            m_Wrapper.m_NaveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @VerticalMove.started += instance.OnVerticalMove;
                @VerticalMove.performed += instance.OnVerticalMove;
                @VerticalMove.canceled += instance.OnVerticalMove;
                @HorizontalMove.started += instance.OnHorizontalMove;
                @HorizontalMove.performed += instance.OnHorizontalMove;
                @HorizontalMove.canceled += instance.OnHorizontalMove;
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Leave.started += instance.OnLeave;
                @Leave.performed += instance.OnLeave;
                @Leave.canceled += instance.OnLeave;
            }
        }
    }
    public NaveActions @Nave => new NaveActions(this);

    // Personagem
    private readonly InputActionMap m_Personagem;
    private IPersonagemActions m_PersonagemActionsCallbackInterface;
    private readonly InputAction m_Personagem_Move;
    private readonly InputAction m_Personagem_Jump;
    private readonly InputAction m_Personagem_Enter;
    private readonly InputAction m_Personagem_Look;
    public struct PersonagemActions
    {
        private @MyControls m_Wrapper;
        public PersonagemActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Personagem_Move;
        public InputAction @Jump => m_Wrapper.m_Personagem_Jump;
        public InputAction @Enter => m_Wrapper.m_Personagem_Enter;
        public InputAction @Look => m_Wrapper.m_Personagem_Look;
        public InputActionMap Get() { return m_Wrapper.m_Personagem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonagemActions set) { return set.Get(); }
        public void SetCallbacks(IPersonagemActions instance)
        {
            if (m_Wrapper.m_PersonagemActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnJump;
                @Enter.started -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnEnter;
                @Look.started -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PersonagemActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PersonagemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PersonagemActions @Personagem => new PersonagemActions(this);

    // OrbitView
    private readonly InputActionMap m_OrbitView;
    private IOrbitViewActions m_OrbitViewActionsCallbackInterface;
    private readonly InputAction m_OrbitView_Zoom;
    private readonly InputAction m_OrbitView_Rotate;
    private readonly InputAction m_OrbitView_StartRotate;
    private readonly InputAction m_OrbitView_Next;
    private readonly InputAction m_OrbitView_Previous;
    public struct OrbitViewActions
    {
        private @MyControls m_Wrapper;
        public OrbitViewActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_OrbitView_Zoom;
        public InputAction @Rotate => m_Wrapper.m_OrbitView_Rotate;
        public InputAction @StartRotate => m_Wrapper.m_OrbitView_StartRotate;
        public InputAction @Next => m_Wrapper.m_OrbitView_Next;
        public InputAction @Previous => m_Wrapper.m_OrbitView_Previous;
        public InputActionMap Get() { return m_Wrapper.m_OrbitView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OrbitViewActions set) { return set.Get(); }
        public void SetCallbacks(IOrbitViewActions instance)
        {
            if (m_Wrapper.m_OrbitViewActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnZoom;
                @Rotate.started -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnRotate;
                @StartRotate.started -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnStartRotate;
                @StartRotate.performed -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnStartRotate;
                @StartRotate.canceled -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnStartRotate;
                @Next.started -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnNext;
                @Previous.started -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_OrbitViewActionsCallbackInterface.OnPrevious;
            }
            m_Wrapper.m_OrbitViewActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @StartRotate.started += instance.OnStartRotate;
                @StartRotate.performed += instance.OnStartRotate;
                @StartRotate.canceled += instance.OnStartRotate;
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
            }
        }
    }
    public OrbitViewActions @OrbitView => new OrbitViewActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface INaveActions
    {
        void OnVerticalMove(InputAction.CallbackContext context);
        void OnHorizontalMove(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnLeave(InputAction.CallbackContext context);
    }
    public interface IPersonagemActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IOrbitViewActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnStartRotate(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
    }
}
